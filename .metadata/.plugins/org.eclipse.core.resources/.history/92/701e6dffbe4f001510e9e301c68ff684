package com.example.blu;

import java.util.ArrayList;

import java.util.List;
import java.util.Set;
import java.util.UUID;

import com.example.bluetooth.R;
import com.example.bluetooth.SecondActivity;
import com.example.bluetooth.ThirdActivity;
import com.example.bluetooth.SecondActivity.MyOnItemClick;

import android.os.Bundle;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.view.Menu;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

public class TwoMainActivity extends Activity {

	// (本地)蓝牙适配器
	private BluetoothAdapter bt_adapter = null;
	// 存以配对的设备名称及地址
	private List<String> list_device = new ArrayList<String>();;
	// 数组型适配器
	private ArrayAdapter<String> arrayadapter = null;

	// 使用唯一的UUID码
	public final static UUID MY_UUID = UUID.fromString("2d266186-01fb-47c2-8d9f-10b8ec891363");
	// 定义位移使用的字符串标识
	public final static String NAME = "NewBluetooth_Socket";

	/*****************************************************/
	List<String> mList = new ArrayList<String>();;
	ListView list;
	ArrayAdapter<String> myAdapter;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_two_main);
		// 初始化
		list = (ListView) findViewById(R.id.device);
		/************************** 数组适配器 ********************************/
		// 定义数组适配器《参数类型》 一参 页面对象 二参 适配器的布局 三参 数据

		mList.add("设备1");
		mList.add("设备2");
		mList.add("设备3");
		mList.add("设备4");
		// 数组源为数组
		String[] mybarray = { "蓝牙1", "蓝牙2", "蓝牙3", "蓝牙4" };
		myAdapter = new ArrayAdapter<String>(TwoMainActivity.this, android.R.layout.simple_expandable_list_item_1,
				mList);
		// 加载数组适配器
		list.setAdapter(myAdapter);
		// listview短按监听
		list.setOnItemClickListener(new AdapterView.OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
				Intent intent = new Intent();
				intent.setClass(TwoMainActivity.this, ThreeMainActivity.class);
				startActivity(intent);
				// TODO Auto-generated method stub

			}
		});

	}

	// 数据源
	public void dataInit() {
		// (本地)蓝牙适配器
		bt_adapter = BluetoothAdapter.getDefaultAdapter();

		// 得到已连接设备
		Set<BluetoothDevice> set_device = bt_adapter.getBondedDevices();
		if (set_device.size() > 0) {
			// 得到每一个设备的名称和地址
			for (BluetoothDevice btdevice : set_device) {
				list_device.add(btdevice.getName() + "\n" + btdevice.getAddress());
			}
		}

	}

	public void viewInit() {
		// 初始化链表
		ListView lv_device = (ListView) findViewById(R.id.listView1);

		// 数组型适配器
		arrayadapter = new ArrayAdapter<String>(TwoMainActivity.this, android.R.layout.simple_list_item_1, list_device);
		// 装载适配器
		lv_device.setAdapter(arrayadapter);
		lv_device.setOnItemClickListener(new MyOnItemClick());

		// 注册广播
		IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
		TwoMainActivity.this.registerReceiver(receiver, filter);

		filter = new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
		TwoMainActivity.this.registerReceiver(receiver, filter);

		// filter = new
		// IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
		// SecondActivity.this.registerReceiver(receiver, filter);
	}

	// 搜索的点击事件
	public void onclick(View v) {
		// 如果正在搜索，点击及停止搜索
		// 否则开启搜索功能
		if (bt_adapter.isDiscovering()) {
			bt_adapter.cancelDiscovery();
		} else {
			bt_adapter.startDiscovery();
		}
	}

	// 链表点击事件
	public class MyOnItemClick implements AdapterView.OnItemClickListener {

		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

			// TODO Auto-generated method stub

			String name = arrayadapter.getItem(position);
			try {
				String address = name.substring(name.indexOf("\n") + 1).trim();
				if (bt_adapter.isDiscovering()) {
					bt_adapter.cancelDiscovery();
				}
				Intent intent = new Intent();
				intent.setClass(SecondActivity.this, ThirdActivity.class);
				intent.putExtra(NAME, address);
				SecondActivity.this.startActivity(intent);

			} catch (Exception e) {
				Toast.makeText(SecondActivity.this, e.getMessage(), Toast.LENGTH_LONG).show();
			}

		}
	}

	// 广播
	private BroadcastReceiver receiver = new BroadcastReceiver() {

		@Override
		public void onReceive(Context context, Intent intent) {

			// TODO Auto-generated method stub
			// try {
			String action = intent.getAction();

			if (BluetoothDevice.ACTION_FOUND.equals(action)) {
				// 在Intent中获取设备对象
				BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);

				if (device.getBondState() != BluetoothDevice.BOND_BONDED) {
					String message = device.getName() + "\n" + device.getAddress();
					if (!list_device.contains(message)) {
						list_device.add(message);
						arrayadapter.notifyDataSetChanged();
					}
				}
			}
			// } catch (Exception e) {
			// e.printStackTrace();
			// }
		}
	};

}
