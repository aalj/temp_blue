/**
 * BluetoothAccpte.java
 * com.aalj35.aa11.services
 *
 * Function： TODO 
 *
 *   ver     date      		author
 * ──────────────────────────────────
 *   		 2015年8月24日 		view
 *
 * Copyright (c) 2015, TNT All Rights Reserved.
*/

package com.aalj35.aa11.services;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import com.aalj35.aa11.mystart.Changliang;
import com.aalj35.aa11.utils.SendData;

import android.app.Service;
import android.app.admin.DevicePolicyManager;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Vibrator;
import android.widget.Toast;

/**
 * ClassName:BluetoothAccpte
 * Function: TODO ADD FUNCTION
 * Reason:	 TODO ADD REASON
 *
 * @author   view
 * @version  
 * @since    Ver 1.1
 * @Date	 2015年8月24日		下午2:16:55
 *
 * @see 	 

 */
public class BluetoothAccpte extends Service {
	
	
	BluetoothAdapter bluetoothAdapter = null;
	BluetoothDevice  bluetoothDevice = null;
	BluetoothSocket bluetoothSocket= null;
	BluetoothServerSocket bluetoothServerSocket = null;
	private OutputStream os;
	boolean exit  = false;
	Vibrator vibrator = null;

	@Override
	public IBinder onBind(Intent intent) {
		
		
		return null;
		
	}

	@Override
	public void onCreate() {
		
		
		
		 vibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
		bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		System.out.println("服务开启");
		new BlueThread ().start();
		
		
		super.onCreate();
		
	}

	@Override
	public void onDestroy() {
		
		
		super.onDestroy();
		
	}
	
	
	/**
	 * 消息机制   用于吧接收到的消息加载到当前的布局里面
	 */
	private static Handler handler = new Handler(){
		public void handleMessage(Message msg) {
			String s = (String)msg.obj;
			switch (s) {
			case Changliang.SEND:
				System.out.println("现在正在服务里面，正在进行连接");
				Changliang.SUCCESS_FLAGS="3";
				SendData.dataInit("lklk");
				break;
			
				
			case Changliang.SHAKE:
				long[] pattern = { 100, 400, 100, 400 }; 
				vibrator.vibrate(pattern, 2); 
				Toast.makeText(getApplicationContext(), s,0).show();
				break;
			case Changliang.CANCALSHAKE:
				vibrator.cancel();
				Toast.makeText(getApplicationContext(), s,0).show();
				break;
			case Changliang.LOCK:
				myLock();
				Toast.makeText(getApplicationContext(), s,0).show();
				break;
			case Changliang.UNLOCK:
				
				Toast.makeText(getApplicationContext(), s,0).show();
				break;

			default:
				break;
			}
			
			
			
			
			
			
		};
	};
	
	
	private DevicePolicyManager mDevicePolicyManager;
	private ComponentName mComponentName;

	public void myLock() {
		mDevicePolicyManager = (DevicePolicyManager) getSystemService(Context.DEVICE_POLICY_SERVICE);
		mComponentName = new ComponentName(getApplicationContext(), com.aalj35.aa11.Receiver.LockReceiver.class);
		// 判断是否有权限
		if (mDevicePolicyManager.isAdminActive(mComponentName)) {
			mDevicePolicyManager.lockNow();
		} else {
			activeManager();
		}
	}

	private void activeManager() {
		// 激活设备管理器获取权限
		Intent intent = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);
		intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN, mComponentName);
		intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION, "传说中的一键锁屏");
		startActivity(intent);
		
	}
	
	
	
	/**
	 * 
	 * ClassName:BlueThread
	 * Function: 创建一个线程执行接收连接过程
	 * Reason:	 TODO ADD REASON
	 *
	 * @author   view
	 * @version  BluetoothFuntion
	 * @since    Ver 1.1
	 * @Date	 2015	2015年8月24日		上午11:32:02
	 *
	 * @see
	 */
	private class BlueThread extends Thread {

		private InputStream is;

		public BlueThread() {

			try {
				// 此方法用来创建BluetoothServerSocket的对象
				// 第一个参数表示蓝牙服务的名称，可以是任意字符串
				// 第二个参数是UUID
				bluetoothServerSocket = bluetoothAdapter
						.listenUsingRfcommWithServiceRecord(
								Changliang.NAME,
								Changliang.MY_UUID);
			} catch (IOException e) {

			}
		}

		public void run() {

			try {
				// 通过BluetoothServerSocket.accept();方法收到客户端的请求后，
				// accept()方法会返回一个BluetoothSocket对象，可以通过该对象获得读写数据的InputStream和OutputStream对象
				// 等待接受蓝牙客户端的请求
				bluetoothSocket = bluetoothServerSocket.accept();

				
				// 通过循环不断接收客户端发过来的数据。如果客户端暂时没发数据，则read方法处于阻塞状态
				while (!exit) {
					is = bluetoothSocket.getInputStream();
					os = bluetoothSocket.getOutputStream();
					byte[] buffer = new byte[2048];
					int count = is.read(buffer);

					System.out.println(count + "---------------");
					String recvData = new String(buffer, 0, count, "utf-8");
					
					System.out.println("----" + recvData );
					//向消息机制里面发送数据
					//message  发送消息的承载体 
					Message msg = Message.obtain();
					//发送消息的类型    obj表示 Object
					msg.obj = recvData;
					//发送消息
					handler.sendMessage(msg);
				}

			} catch (Exception e) {

			}
		}
	}

}

